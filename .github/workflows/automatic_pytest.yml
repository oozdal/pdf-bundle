name: tests

on:
  push:
    tags:
      - '*'
    branches:
      - main
  pull_request:
    branches:
      - '*'
    types: [ closed, opened, synchronize, reopened ]
  
  schedule:
    - cron: "0 18 * * SUN" # Run every Sunday at 18:00 PM UTC
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CACHE_NUMBER: 1  # increase to reset cache manually
  IMAGE_NAME: pdfbundle

permissions: write-all

jobs:
  job1:

    # https://github.com/marketplace/actions/setup-miniconda#use-a-default-shell
    defaults:
      run:
        shell: bash -el {0}

    name: "Unit Testing"
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || github.event_name == 'push' || ( github.event_name == 'pull_request' && github.event.pull_request.head.ref != 'main' )
    runs-on: ubuntu-22.04
    timeout-minutes: 30 # increasing timeout
    steps:
        - uses: actions/checkout@v2
              
        - name: Set up Python 3.10
          uses: actions/setup-python@v3
          with:
            python-version: "3.10"
            architecture: "x64"
          env:
            AGENT_TOOLSDIRECTORY: /opt/hostedtoolcache
  
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: Install AWS CLI
          run: |
            sudo apt-get update && sudo apt-get install -y awscli

        - name: Configure AWS
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          run: |
            aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
            aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
            aws configure set region "$AWS_DEFAULT_REGION"
              
        - name: Run tests
          env: 
            PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          run: |
            python -m pytest test_main.py

  job2:
    needs: job1

    # https://github.com/marketplace/actions/setup-miniconda#use-a-default-shell
    defaults:
      run:
        shell: bash -el {0}

    name: "Build and Push to DockerHub"
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || ( github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.head.ref != 'main' ) # this job will only run if the PR has been merged from dev branchs
    runs-on: ubuntu-22.04

    steps:
      - name: Clean unnecessary files to save space
        run: |
          docker rmi $(docker images -q)
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo apt -y autoremove --purge
          sudo apt -y autoclean
          sudo apt clean
          rm --recursive --force "$AGENT_TOOLSDIRECTORY"
          df -h
          
      - name: Checkout
        uses: actions/checkout@v2
           
      - name: Login to Docker Hub
        id: login-dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
          
      - name: Get a docker image tag for DockerHub
        env:
          REGISTRY: ${{ steps.login-dockerhub.outputs.registry }}
          REPOSITORY: pdfbundle
          IMAGE_TAG: latest
        run: |
            echo "docker_image=$REGISTRY/$REPOSITORY" > $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.docker_image }}
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=ref,event=pr
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Build, Tag, and Push The Docker Image to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ozerozdal/pdfbundle:latest
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: |
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
